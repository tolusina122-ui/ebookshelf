{
	"info": {
		"_postman_id": "0f983b77-e891-4780-b592-b6192b58da08",
		"name": "Gateway API Operations",
		"description": "# Collection of Gateway Operations\n\nThis Postman collection allows you to test various requests related to managing your online payment transactions in the gateway.\n\n## When using the collection:\n- If the requests within a folder have a number in front of them, they are part of a flow. Tests are used to store values from responses as variables, and those variables are consequently used in follow-up requests. This means that those requests must be run in the provided order to ensure successful responses.\n- The Payment Methods folder contains examples of requests using specific payment methods. All requests in all other folders use a credit card as a payment method.\n\n## Prerequisites:\nIn order for these demonstrations to work, you'll have to define the following Postman variables in the Environment file:\n\n**Local variables -**\n- \\{\\{host\\}\\} - The gateway host (without the https:// prefix), e.g. payment.gateway.com\n- \\{\\{merchantId\\}\\} - The merchant ID to use.\n- \\{\\{apiPassword\\}\\} - The merchant's API password.\n- \\{\\{currency\\}\\} - Currency.\n- \\{\\{authorizationCode\\}\\} - Value generated by the issuing bank in response to a proposal to transfer funds. This variable is needed for REFERRAL and standalone CAPTURE requests.\n- \\{\\{appleToken\\}\\} - ApplePay token, required for ApplePay mobile wallets requests. This token is always provided by the merchant and is generated by the merchant's system.\n- \\{\\{googleToken\\}\\} - GooglePay token, required for GooglePay mobile wallets requests. This token is always provided by the merchant and is generated by the merchant's system.\n\nPCI sensitive information\n- \\{\\{fpan\\}\\} - Financial PAN of the credit or debit card.\n- \\{\\{expMonth\\}\\} - Card Expiry Month for the main fpan.\n- \\{\\{expYear\\}\\} - Card Expiry Year for the main fpan.\n- \\{\\{securityCode\\}\\} - Card Security Code for the main fpan.\n- \\{\\{fpanAdditional\\}\\} - Financial PAN of the credit or debit card. The variable is specific for Challenge Flow, Pay with Risk Reject, Search Tokens requests.\n- \\{\\{expMonthAdditional\\}\\} - Card Expiry Month for fpanAdditional.\n- \\{\\{expYearAdditional\\}\\} - Card Expiry Year for fpanAdditional..\n- \\{\\{securityCodeAdditional\\}\\} - Card Security Code for fpanAdditional\n- \\{\\{costcoGiftCardNumber\\}\\} - Costco gift card number, required for Balance Inquiry requests.\n- \\{\\{costcoCardPin\\}\\} - Costco gift card pin.\n- \\{\\{giftCardNumber\\}\\} - Gift card number. Required for requests with the gift card payment method.\n\n**Autogenerated Variables - those variables will be set automatically by the pre-request script:** \n- \\{\\{cardPrefix\\}\\} - The first 10 digits of the card number, as printed on the card. It is automatically truncated from fpanMain. Required for Payment Options Inquiry.\n- \\{\\{orderId\\}\\} - A unique identifier for this order to distinguish it from any other order you create.\n- \\{\\{nextPage\\}\\} - An Auto generated variable required for Search Token requests. It used to navigate through the pages and retrieve the next set of results.\n- \\{\\{agreementId\\}\\} - for the Payment Agreement ID allowing the merchant to store and use payer's payment details for merchant-initiated payments.\n- \\{\\{3DS2acsURL\\}\\} - The URL of the issuer's Access Control Server (ACS). Required for Challenge requests.\n- \\{\\{gatewayRecommendation\\}\\} - Recommendation provided by the gateway on your next actions, based on the 3DS transaction filtering rules configured, taken from AUTH_PAYER request and used in subsequent requests from 3D Secure Authentication requests. \n- \\{\\{tokenId\\}\\} - Token identifier used in requests. Its generation can vary based on merchant configuration. It may either be merchant-supplied, generated via pre-request scripts, or system-generated.\n- \\{\\{threeDSMethodPostData\\}\\} - ThreeDS Method Data from INITIATE AUTHENTICATION response and used in subsequent requests from 3D Secure Authentication flows.\n- \\{\\{sessionId\\}\\} - Session identifier\n- \\{\\{transactionId\\}\\} - Unique identifier for this transaction to distinguish it from any other transaction on the order.\n- \\{\\{creqMessage\\}\\} - The Base64 URL encoded CReq message to be used for the Challenge flow.\n**General Notes:**\n- The example requests in the collection are divided into multiple folders. To make it easy to find the request you need, the main folder levels of the collection follow the structure of the documentation library.\n- Pre-request scripts are used to generate unique order IDs for all initial transactions.\n- Please exercise caution when working with sensitive information. Be vigilant about protecting API keys.\n- Avoid Saving Sensitive Information on the Postman Cloud: Do not save any sensitive information, i.e. keys, directly on the Postman cloud. Storing such information in public or shared spaces poses a security risk and may lead to unauthorized access.\n- Consider using the Postman application locally on your machine. A local instance like lightweight Postman API client can provide more control over your data, reducing the risk of unintentional exposure.\n- Please follow Postmanâ€™s guidelines for using API keys on their platform\n  - Please use **[Current value (local)](https://learning.postman.com/docs/sending-requests/environments/managing-environments/)** in Environment variables. As environment variable's current value is used in your local instance of Postman and isn't synced to your Postman account.\n  - Please use **[Variable Types](https://blog.postman.com/introducing-secret-variable-type-in-postman/)** as **Secret** instead of **Default**. The secret variable type will enable masking of the initial and current values.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39975845"
	},
	"item": [
		{
			"name": "Hosted Checkout",
			"item": [
				{
					"name": "Initial Transactions",
					"item": [
						{
							"name": "INITIATE CHECKOUT for PURCHASE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\") \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \"apiOperation\": \"INITIATE_CHECKOUT\",\r\n    \"checkoutMode\": \"WEBSITE\",\r\n    \"interaction\":{\r\n        \"operation\" :\"PURCHASE\",\r\n         \"merchant\": { \r\n            \"name\": \"JK Enterprises LLC\",\r\n            \"url\":  \"https://www.your.site.url.com\"\r\n        },\r\n        \"returnUrl\": \"https://www.your.site.url.com\"\r\n    },\r\n    \"order\": {\r\n        \"currency\":\"{{currency}}\",\r\n        \"amount\": \"250.00\",\r\n        \"id\" : \"{{orderId}}\",\r\n        \"description\": \"Goods and Services\"\r\n    }\r\n } \r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "INITIATE CHECKOUT for AUTHORIZE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\") \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \"apiOperation\": \"INITIATE_CHECKOUT\",\r\n    \"checkoutMode\": \"WEBSITE\",\r\n    \"interaction\":{\r\n        \"operation\" :\"AUTHORIZE\",\r\n         \"merchant\": { \r\n            \"name\": \"JK Enterprises LLC\",\r\n            \"url\":  \"https://www.your.site.url.com\"\r\n        },\r\n        \"returnUrl\": \"https://www.your.site.url.com\"\r\n    },\r\n    \"order\": {\r\n        \"currency\":\"{{currency}}\",\r\n        \"amount\": \"250.00\",\r\n        \"id\" : \"{{orderId}}\",\r\n        \"description\": \"Goods and Services\"\r\n    }\r\n } \r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "INITIATE CHECKOUT for VERIFY",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\") \r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"VERIFY\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \"apiOperation\": \"INITIATE_CHECKOUT\",\r\n    \"checkoutMode\": \"WEBSITE\",\r\n    \"interaction\":{\r\n        \"operation\" :\"VERIFY\",\r\n         \"merchant\": { \r\n            \"name\": \"JK Enterprises LLC\",\r\n            \"url\":  \"https://www.your.site.url.com\"\r\n        },\r\n        \"returnUrl\": \"https://www.your.site.url.com\"\r\n    },\r\n    \"order\": {\r\n        \"currency\":\"{{currency}}\",\r\n        \"amount\": \"250.00\",\r\n        \"id\" : \"{{orderId}}\",\r\n        \"description\": \"Goods and Services\"\r\n    }\r\n } \r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authorize and Capture Flow",
					"item": [
						{
							"name": "1. INITIATE CHECKOUT for AUTHORIZE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"var orderId = date.getTime().toString();\r",
											"postman.setEnvironmentVariable(\"orderId\", orderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"sessionId\", jsonData.session.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"apiOperation\": \"INITIATE_CHECKOUT\",\r\n    \"checkoutMode\": \"WEBSITE\",\r\n    \"interaction\":{\r\n        \"operation\" :\"AUTHORIZE\",\r\n         \"merchant\": { \r\n            \"name\": \"JK Enterprises LLC\",\r\n            \"url\":  \"https://www.mastercard.com\"\r\n        },\r\n        \"returnUrl\": \"https://www.mastercard.com\"\r\n    },\r\n    \"order\": {\r\n        \"currency\":\"{{currency}}\",\r\n        \"amount\": \"250.00\",\r\n        \"id\" : \"{{orderId}}\",\r\n        \"description\": \"Goods and Services\"\r\n    }\r\n} \r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. CAPTURE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"session\": {\r\n       \"id\": \"{{sessionId}}\"\r\n   },\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"250.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. REFUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"REFUND\",\r\n   \"session\": {\r\n       \"id\": \"{{sessionId}}\"\r\n   },\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Contains Hosted Checkout example requests for:\n\n- Initial transactions for PAY, AUTHORIZE, and VERIFY\n    \n- Authorize and Capture flow"
		},
		{
			"name": "Hosted Session",
			"item": [
				{
					"name": "Basic Flow",
					"item": [
						{
							"name": "1. CREATE SESSION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"session\", jsonData.session.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. UPDATE SESSION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session",
										"{{sessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. PAY with Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"var orderId = date.getTime().toString();\r",
											"postman.setEnvironmentVariable(\"orderId\", orderId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"session\": {\n       \"id\": \"{{sessionId}}\"\n   }\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authorize and Capture Flow",
					"item": [
						{
							"name": "1. CREATE SESSION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"session\", jsonData.session.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. UPDATE SESSION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session",
										"{{sessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. AUTHORIZE with Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();",
											"var orderId = date.getTime().toString();",
											"postman.setEnvironmentVariable(\"orderId\", orderId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"session\": {\r\n   \t\t\"id\": \"{{sessionId}}\"\r\n   \t}\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. CAPTURE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. REFUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"REFUND\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"50.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"3"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Contains Hosted Session example requests for:\n\n- Basic transaction flow\n    \n- Authorize and Capture flow"
		},
		{
			"name": "Direct Payment",
			"item": [
				{
					"name": "Initial Transactions",
					"item": [
						{
							"name": "VERIFY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"VERIFY\",\r\n   \"order\": {\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "AUTHORIZE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PAY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}}\n   \t\t\t}\n   \t\t}\n   }\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Standalone CAPTURE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   },\r\n   \"transaction\": {\r\n        \"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\",\r\n        \"authorizationCode\": \"{{authorizationCode}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Standalone REFUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"REFUND\",\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   },\r\n   \"transaction\": {\r\n        \"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authorize and Capture Flow",
					"item": [
						{
							"name": "Normal Responses",
							"item": [
								{
									"name": "1. AUTHORIZE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGVtbw==",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. CAPTURE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGVtbw==",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Chaotic Responses",
							"item": [
								{
									"name": "1. AUTHORIZE - Enable Chaotic Response - non-error response",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGVtbw==",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-MC-Chaotic-Response",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. AUTHORIZE - Enable Chaotic Response - Error response",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.expect(pm.response.code).to.be.equal(400)\r",
													"});\r",
													"\r",
													"pm.test(\"Result is ERROR\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"ERROR\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGVtbw==",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-MC-Chaotic-Response",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"1234\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Advanced Flow",
					"item": [
						{
							"name": "1. AUTHORIZE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"150.00\",\r\n        \"certainty\": \"ESTIMATED\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. UPDATE AUTHORIZATION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"UPDATE_AUTHORIZATION\",\r\n   \"transaction\": {\r\n       \"amount\": \"200.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. CAPTURE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. VOID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"VOID\",\r\n   \"transaction\": {\r\n   \t\t\"targetTransactionId\": \"3\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/4",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. CAPTURE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/5",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. REFUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"REFUND\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/6",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"6"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Referral Flow",
					"item": [
						{
							"name": "1. AUTHORIZE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is FAILURE\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"FAILURE\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is REFERRED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"REFERRED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.TEST{{merchantId}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic bWVyY2hhbnQuVEVTVEFfQkFTX1VUX01TOjkyZDg4Mzc5MTJkMWQ3MWVmNDcwODQ4NjU4MTU5NGI4"
									},
									{
										"key": "",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"apiOperation\": \"AUTHORIZE\",\r\n    \"order\": {\r\n        \"amount\": \"10.01\",\r\n        \"currency\": \"{{currency}}\"\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"street\": \"Alpha St\"\r\n        }\r\n    },\r\n    \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"nameOnCard\": \"nm\",\r\n                \"number\": \"{{fpan}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/TEST{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"TEST{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								},
								"description": "\n"
							},
							"response": []
						},
						{
							"name": "2. REFERRAL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.TEST{{merchantId}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic bWVyY2hhbnQuVEVTVEFfQkFTX1VUX01TOjkyZDg4Mzc5MTJkMWQ3MWVmNDcwODQ4NjU4MTU5NGI4"
									},
									{
										"key": "",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"apiOperation\": \"REFERRAL\",\r\n    \"transaction\": {\r\n        \"authorizationCode\": \"{{authorizationCode}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/TEST{{merchantId}}/order/{{orderId}}/transaction/2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"TEST{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"2"
									]
								},
								"description": "\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "Disbursement Flow",
					"item": [
						{
							"name": "1. PAY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.TEST{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"apiOperation\": \"PAY\",\n    \"order\": {\n        \"amount\": \"100\",\n        \"currency\": \"{{currency}}\"\n    },\n    \"sourceOfFunds\": {\n        \"type\": \"CARD\",\n        \"provided\": {\n            \"card\": {\n                \"nameOnCard\": \"nm\",\n                \"number\": \"{{fpan}}\",\n                \"expiry\": {\n                    \"month\": \"{{expMonth}}\",\n                    \"year\": \"{{expYear}}\"\n                }\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/TEST{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"TEST{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. DISBURSEMENT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.TEST{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"apiOperation\": \"DISBURSEMENT\",\n    \"disbursementType\": \"GAMING_WINNINGS\",\n    \"order\": {\n        \"amount\": \"1\",\n        \"currency\": \"{{currency}}\"\n    },\n    \"sourceOfFunds\": {\n        \"type\": \"CARD\",\n        \"provided\": {\n            \"card\": {\n                \"securityCode\": \"{{securityCode}}\",\n                \"number\": \"{{fpan}}\",\n                \"expiry\": {\n                    \"month\": \"{{expMonth}}\",\n                    \"year\": \"{{expYear}}\"\n                }\n            }\n        }\n    },\n    \"creditCardBillPayment\": {\n        \"paymentSender\": {\n            \"bankAccountNumber\": \"100\",\n            \"cardNumber\": \"123456789\",\n            \"firstName\": \"testFirst\",\n            \"lastName\": \"testLast\",\n            \"address\": {\n                \"city\": \"Delhi\",\n                \"country\": \"IND\",\n                \"postcodeZip\": \"2067567\",\n                \"stateProvince\": \"NSW\",\n                \"stateProvinceCode\": \"125\",\n                \"street\": \"123\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/TEST{{merchantId}}/order/{{orderId}}/transaction/2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"TEST{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Contains Direct Payment example requests for:\n\n- Initial transactions for VERIFY, AUTHORIZE, PAY, standalone CAPTURE, standalone REFUND, and DISBURSEMENT\n- Authorize and Capture transaction flow\n- Advanced transaction flow with AUTHORIZE, UPDATE AUTHORIZATION, CAPTURE, VOID, re-CAPTURE, and REFUND\n- Referral transaction flow with AUTHORIZE and REFERRAL"
		},
		{
			"name": "Retrieving Details",
			"item": [
				{
					"name": "Retrieving Orders",
					"item": [
						{
							"name": "1. AUTHORIZE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. CAPTURE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. RETRIEVE ORDER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieving Transactions",
					"item": [
						{
							"name": "1. PAY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"transactionId\", jsonData.transaction.id);\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(jsonData.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}}\n   \t\t\t}\n   \t\t}\n   }\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. RETRIEVE TRANSACTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/{{transactionId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"{{transactionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieving Sessions",
					"item": [
						{
							"name": "1. CREATE SESSION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"sessionId\", jsonData.session.id);",
											"",
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
											"});",
											"",
											"pm.test(\"Result is SUCCESS\", () => {",
											"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. UPDATE SESSION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Update Status is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.session.updateStatus).to.eql(\"SUCCESS\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\",\r\n        \"id\":\"{{orderId}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session",
										"{{sessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. RETRIEVE SESSION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Update Status is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.session.updateStatus).to.eql(\"SUCCESS\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"session",
										"{{sessionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Retrieving Tokens",
					"item": [
						{
							"name": "1. CREATE TOKEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"tokenId\", jsonData.token);",
											"",
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
											"});",
											"",
											"pm.test(\"Result is SUCCESS\", () => {",
											"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
											"});",
											"",
											"pm.test(\"Status is VALID\", () => {",
											"    pm.expect(jsonData.status).to.eql(\"VALID\")",
											"});",
											" ",
											"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {",
											"    pm.expect(jsonData.response.gatewayCode).to.eql(\"BASIC_VERIFICATION_SUCCESSFUL\")",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. RETRIEVE TOKEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"tokenId\", jsonData.token);\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Status is VALID\", () => {\r",
											"    pm.expect(jsonData.status).to.eql(\"VALID\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/{{tokenId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"token",
										"{{tokenId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Contains request examples for retrieving orders, transactions, sessions, and tokens."
		},
		{
			"name": "Payment Methods",
			"item": [
				{
					"name": "Card Payments",
					"item": [
						{
							"name": "Click to Pay",
							"item": [
								{
									"name": "Hosted Checkout",
									"item": [
										{
											"name": "INITIATE CHECKOUT Click to Pay",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															"\r",
															"postman.setNextRequest(\"INITIATE CHECKOUT Gift Cards\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n    \"apiOperation\": \"INITIATE_CHECKOUT\",\r\n    \"checkoutMode\": \"WEBSITE\",\r\n    \"interaction\":{\r\n        \"operation\" :\"PURCHASE\",\r\n         \"merchant\": { \r\n            \"name\": \"JK Enterprises LLC\",\r\n            \"url\":  \"https://www.your.site.url.com\"\r\n        },\r\n        \"returnUrl\": \"https://www.your.site.url.com\"\r\n    },\r\n    \"order\": {\r\n        \"currency\":\"{{currency}}\",\r\n        \"amount\": \"250.00\",\r\n        \"id\" : \"{{orderId}}\",\r\n        \"description\": \"Goods and Services\"\r\n    }\r\n } \r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"session"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Hosted Session",
									"item": [
										{
											"name": "1. CREATE SESSION",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"session\", jsonData.session.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"session"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. UPDATE SESSION with order details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic ZGVtbw==",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"session",
														"{{sessionId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. UPDATE SESSION with billing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic ZGVtbw==",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \r\n   \"billing\": {\r\n   \t\t\"address\":  {\r\n   \t\t\t\"city\": \"New York\",\r\n   \t\t\t\"company\": \"TestCompany\",\r\n            \"country\": \"USA\",\r\n            \"postcodeZip\": \"000000\",\r\n            \"stateProvince\": \"New York\",\r\n            \"stateProvinceCode\": \"NY\",\r\n            \"street\": \"123 Test Avenue\",\r\n            \"street2\": \"Unit 2-B\"\r\n   \t\t}\r\n   }\r\n}\r\n"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"session",
														"{{sessionId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. UPDATE SESSION FROM WALLET",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic ZGVtbw==",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \r\n   \"apiOperation\": \"UPDATE_SESSION_FROM_WALLET\"\r\n}\r\n"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"session",
														"{{sessionId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "5. AUTHORIZE with Session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var date = new Date();",
															"var orderId = date.getTime().toString();",
															"postman.setEnvironmentVariable(\"orderId\", orderId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic ZGVtbw==",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"session\": {\r\n   \t\t\"id\": \"{{sessionId}}\"\r\n   \t}\r\n}\r\n"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Gift Cards",
							"item": [
								{
									"name": "Hosted Checkout",
									"item": [
										{
											"name": "INITIATE CHECKOUT Gift Cards",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n    \"apiOperation\": \"INITIATE_CHECKOUT\",\r\n    \"checkoutMode\": \"WEBSITE\",\r\n    \"interaction\":{\r\n        \"operation\" :\"VERIFY\",\r\n         \"merchant\": { \r\n            \"name\": \"JK Enterprises LLC\",\r\n            \"url\":  \"https://www.your.site.url.com\"\r\n        },\r\n        \"returnUrl\": \"https://www.your.site.url.com\"\r\n    },\r\n    \"order\": {\r\n        \"currency\":\"{{currency}}\",\r\n        \"amount\": \"250.00\",\r\n        \"id\" : \"{{orderId}}\",\r\n        \"description\": \"Goods and Services\"\r\n    }\r\n } \r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"session"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Direct Payment",
									"item": [
										{
											"name": "VERIFY Gift Cards",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"apiOperation\": \"VERIFY\",\r\n    \"sourceOfFunds\": {\r\n        \"provided\": {\r\n            \"giftCard\": {\r\n                \"number\": \"{{giftCardNumber}}\"\r\n            }\r\n        },\r\n        \"type\": \"GIFT_CARD\"\r\n    },\r\n    \"order\": {\r\n        \"amount\": \"100\",\r\n        \"currency\": \"{{currency}}\"\r\n    }\r\n}"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "BALANCE INQUIRY Gift Cards",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is BALANCE_AVAILABLE\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BALANCE_AVAILABLE\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"sourceOfFunds\": {\r\n        \"provided\": {\r\n            \"giftCard\": {\r\n                \"pin\": \"{{costcoCardPin}}\",\r\n                \"expectedLocalBrand\": \"COSTCO_CASH_CARD\",\r\n                \"number\": \"{{costcoGiftCardNumber}}\"\r\n            }\r\n        },\r\n        \"type\": \"GIFT_CARD\"\r\n    },\r\n    \"order\": {\r\n        \"currency\": \"{{currency}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/balanceInquiry",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"balanceInquiry"
													]
												}
											},
											"response": []
										},
										{
											"name": "PAY Gift Cards",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "merchant.TEST{{merchantId}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"apiOperation\": \"PAY\",\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"giftCard\": {\n                \"number\": \"{{giftCardNumber}}\"\n            }\n        },\n        \"type\": \"GIFT_CARD\"\n    },\n    \"order\": {\n        \"amount\": \"100\",\n        \"currency\": \"{{currency}}\"\n    },\n    \"transaction\": {\n        \"acquirer\": {\n            \"customData\": \"{\\\"CreditPlanNumber\\\":\\\"00100\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/TEST{{merchantId}}/order/{{orderId}}/transaction/2",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"TEST{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"2"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Mobile Wallets",
					"item": [
						{
							"name": "Apple Pay",
							"item": [
								{
									"name": "PAY (merchant-decrypted)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\",\n        \"walletProvider\": \"APPLE_PAY\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"devicePayment\": {\n                    \"cryptogramFormat\": \"3DSECURE\",\n                    \"onlinePaymentCryptogram\": \"IA/8pdiWftSsxpFT6wABoDABhgA=\",\n                    \"eciIndicator\": \"20\"\n                }\n   \t\t\t}\n   \t\t}\n   },\n    \"device\": {\n       \"ani\": \"12341234\"\n    },\n    \"transaction\": {\n       \"source\": \"INTERNET\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Google Pay",
							"item": [
								{
									"name": "PAY (merchant-decrypted)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\",\n        \"walletProvider\": \"GOOGLE_PAY\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"devicePayment\": {\n                    \"cryptogramFormat\": \"3DSECURE\",\n                    \"onlinePaymentCryptogram\": \"IA/8pdiWftSsxpFT6wABoDABhgA=\",\n                    \"eciIndicator\": \"20\"\n                }\n            }\n        }\n   },\n   \"device\": {\n        \"ani\": \"12341234\"\n   },\n   \"transaction\": {\n        \"source\": \"INTERNET\"\n   }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"description": "Contains request examples for using various payment methods, such as card payments and mobile wallets."
		},
		{
			"name": "Security and Fraud Prevention",
			"item": [
				{
					"name": "3D Secure Authentication",
					"item": [
						{
							"name": "Frictionless Flow",
							"item": [
								{
									"name": "1. INITIATE AUTHENTICATION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var redirectHtml = jsonData.authentication.redirect.html;",
													"",
													"var methodStart = redirectHtml.indexOf('threeDSMethodData\\\" value=\\\"') + 'threeDSMethodData\\\" value=\\\"'.length;",
													"var methodEnd = redirectHtml.indexOf('\"', methodStart);",
													"var method = redirectHtml.substring(methodStart, methodEnd);",
													"pm.environment.set(\"threeDSMethodPostData\", method);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is AUTHENTICATION_IN_PROGRESS\", () => {",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"AUTHENTICATION_IN_PROGRESS\")",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"apiOperation\":\"INITIATE_AUTHENTICATION\",\n   \"authentication\":{  \n      \"channel\":\"PAYER_BROWSER\"\n   },\n   \"order\":{  \n      \"currency\":\"{{currency}}\"\n   },\n\t\"sourceOfFunds\":{  \n    \t\"provided\":{  \n        \t\"card\":{  \n            \t\"number\":\"{{fpan}}\"\n    \t\t}\n    \t}\n\t}\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Method URL (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var actionStart = responseBody.indexOf('action=\"') + 'action=\"'.length;",
													"var actionEnd = responseBody.indexOf('\"', actionStart);",
													"var action = responseBody.substring(actionStart, actionEnd);",
													"pm.environment.set(\"3DS2acsURL\", action);",
													"console.log(action);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "threeDSMethodData",
													"value": "{{threeDSMethodPostData}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}/acs/mastercard/v2/method",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"acs",
												"mastercard",
												"v2",
												"method"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Method Complete Callback (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{3DS2acsURL}}",
											"host": [
												"{{3DS2acsURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. AUTHENTICATE PAYER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var redirectHtml = jsonData.authentication.redirect.html;",
													"var actionStart = redirectHtml.indexOf('action=\\\"') + 'action=\\\"'.length;",
													"var actionEnd = redirectHtml.indexOf('\"', actionStart);",
													"var action = redirectHtml.substring(actionStart, actionEnd);",
													"pm.environment.set(\"3DS2acsURL\", action);",
													"",
													"pm.environment.set(\"gatewayRecommendation\", jsonData.response.gatewayRecommendation);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is APPROVED\", () => {",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"APPROVED\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"sourceOfFunds\": {\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n   },\n   \"order\": {\n   \t\t\"amount\": \"100\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n  \"authentication\": {\n  \t\"redirectResponseUrl\": \"https://{{host}}/api/documentation/integrationGuidelines/index.html\"\n  },\n  \"device\": {\n    \"browser\": \"MOZILLA\",\n    \"browserDetails\": {\n      \"3DSecureChallengeWindowSize\": \"FULL_SCREEN\",\n      \"acceptHeaders\": \"application/json\",\n      \"colorDepth\": 24,\n      \"javaEnabled\": true,\n      \"language\": \"en-US\",\n      \"screenHeight\": 640,\n      \"screenWidth\": 480,\n      \"timeZone\": 273\n    },\n    \"ipAddress\": \"127.0.0.1\"\n  },\n  \"apiOperation\": \"AUTHENTICATE_PAYER\"\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Redirect (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "order.id",
													"value": "{{orderId}}",
													"type": "text"
												},
												{
													"key": "transaction.id",
													"value": "1",
													"type": "text"
												},
												{
													"key": "response.gatewayRecommendation",
													"value": "{{gatewayRecommendation}}",
													"type": "text"
												},
												{
													"key": "result",
													"value": "{{gatewayRecommendation}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{3DS2acsURL}}",
											"host": [
												"{{3DS2acsURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. AUTHORIZE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "TNSI_TOGGLES_ON",
												"value": "Enable new 3DS API",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\t\"apiOperation\":\"AUTHORIZE\",\n\t\"authentication\":{\n\t\t\"transactionId\":\"1\"\n\t},\n\t\"sourceOfFunds\":{\n\t\t\"provided\":{  \n        \t\"card\":{  \n            \t\"number\":\"{{fpan}}\",\n            \t\"expiry\":{\n            \t\t\"month\":\"{{expMonth}}\",\n            \t\t\"year\":\"{{expYear}}\"\n            \t},\n                \"securityCode\" : {{securityCode}}\n        \t}\n    \t},\n    \t\"type\":\"CARD\"\n\t},\n\t\"order\": {\n\t\t\"currency\": \"{{currency}}\",\n\t\t\"amount\": \"100.00\"\n\t}\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Frictionless Flow with No Initial Payment",
							"item": [
								{
									"name": "1. INITIATE AUTHENTICATION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var redirectHtml = jsonData.authentication.redirect.html;",
													"",
													"var methodStart = redirectHtml.indexOf('threeDSMethodData\\\" value=\\\"') + 'threeDSMethodData\\\" value=\\\"'.length;",
													"var methodEnd = redirectHtml.indexOf('\"', methodStart);",
													"var method = redirectHtml.substring(methodStart, methodEnd);",
													"pm.environment.set(\"threeDSMethodPostData\", method);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is AUTHENTICATION_IN_PROGRESS\", () => {",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"AUTHENTICATION_IN_PROGRESS\")",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));",
													"pm.environment.set(\"agreementId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"apiOperation\":\"INITIATE_AUTHENTICATION\",\n   \"authentication\":{  \n      \"channel\":\"PAYER_BROWSER\",\n      \"purpose\":\"ADD_CARD\"\n   },\n   \"order\":{  \n      \"currency\":\"{{currency}}\"\n   },\n\t\"sourceOfFunds\":{  \n    \t\"provided\":{  \n        \t\"card\":{  \n            \t\"number\":\"{{fpan}}\"\n    \t\t}\n    \t}\n\t}\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Method URL (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var actionStart = responseBody.indexOf('action=\"') + 'action=\"'.length;",
													"var actionEnd = responseBody.indexOf('\"', actionStart);",
													"var action = responseBody.substring(actionStart, actionEnd);",
													"pm.environment.set(\"3DS2acsURL\", action);",
													"console.log(action);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "threeDSMethodData",
													"value": "{{threeDSMethodPostData}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}/acs/mastercard/v2/method",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"acs",
												"mastercard",
												"v2",
												"method"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Method Complete Callback (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{3DS2acsURL}}",
											"host": [
												"{{3DS2acsURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. AUTHENTICATE PAYER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var redirectHtml = jsonData.authentication.redirect.html;",
													"var actionStart = redirectHtml.indexOf('action=\\\"') + 'action=\\\"'.length;",
													"var actionEnd = redirectHtml.indexOf('\"', actionStart);",
													"var action = redirectHtml.substring(actionStart, actionEnd);",
													"pm.environment.set(\"3DS2acsURL\", action);",
													"",
													"pm.environment.set(\"gatewayRecommendation\", jsonData.response.gatewayRecommendation);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is APPROVED\", () => {",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"APPROVED\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"sourceOfFunds\": {\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n   },\n   \"order\": {\n   \t\t\"amount\": \"0\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n  \"authentication\": {\n  \t\"redirectResponseUrl\": \"https://{{host}}/api/documentation/integrationGuidelines/index.html\"\n  },\n  \"agreement\": {\n    \"id\": \"{{agreementId}}\",\n    \"type\": \"RECURRING\",\n    \"expiryDate\": \"2026-09-02\",\n    \"amountVariability\": \"FIXED\",\n    \"minimumDaysBetweenPayments\": \"30\",\n    \"maximumAmountPerPayment\": \"600\",\n    \"numberOfPayments\": \"13\",\n    \"minimumAmountPerPayment\": \"200\",\n    \"startDate\": \"2022-09-01\",\n    \"paymentFrequency\": \"MONTHLY\",\n  },\n  \"device\": {\n    \"browser\": \"MOZILLA\",\n    \"browserDetails\": {\n      \"3DSecureChallengeWindowSize\": \"FULL_SCREEN\",\n      \"acceptHeaders\": \"application/json\",\n      \"colorDepth\": 24,\n      \"javaEnabled\": true,\n      \"language\": \"en-US\",\n      \"screenHeight\": 640,\n      \"screenWidth\": 480,\n      \"timeZone\": 273\n    },\n    \"ipAddress\": \"127.0.0.1\"\n  },\n  \"apiOperation\": \"AUTHENTICATE_PAYER\"\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Redirect (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "order.id",
													"value": "{{orderId}}",
													"type": "text"
												},
												{
													"key": "transaction.id",
													"value": "1",
													"type": "text"
												},
												{
													"key": "response.gatewayRecommendation",
													"value": "{{gatewayRecommendation}}",
													"type": "text"
												},
												{
													"key": "result",
													"value": "{{gatewayRecommendation}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{3DS2acsURL}}",
											"host": [
												"{{3DS2acsURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. VERIFY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "TNSI_TOGGLES_ON",
												"value": "Enable new 3DS API",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\t\"apiOperation\":\"VERIFY\",\n\t\"authentication\":{\n\t\t\"transactionId\":\"1\"\n\t},\n    \"agreement\": {\n        \"id\": \"{{agreementId}}\",\n        \"type\": \"RECURRING\"\n    },\n\t\"sourceOfFunds\":{\n\t\t\"provided\":{  \n        \t\"card\":{  \n            \t\"number\":\"{{fpan}}\",\n            \t\"expiry\":{\n            \t\t\"month\":\"{{expMonth}}\",\n            \t\t\"year\":\"{{expYear}}\"\n            \t},\n                \"storedOnFile\": \"TO_BE_STORED\"\n        \t}\n    \t},\n    \t\"type\":\"CARD\"\n\t},\n\t\"order\": {\n       \t\"amount\": \"0\",\n\t\t\"currency\": \"{{currency}}\"\n\t}\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"2"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Frictionless Flow for Adding Card",
							"item": [
								{
									"name": "1. INITIATE AUTHENTICATION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var redirectHtml = jsonData.authentication.redirect.html;",
													"",
													"var methodStart = redirectHtml.indexOf('threeDSMethodData\\\" value=\\\"') + 'threeDSMethodData\\\" value=\\\"'.length;",
													"var methodEnd = redirectHtml.indexOf('\"', methodStart);",
													"var method = redirectHtml.substring(methodStart, methodEnd);",
													"pm.environment.set(\"threeDSMethodPostData\", method);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is AUTHENTICATION_IN_PROGRESS\", () => {",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"AUTHENTICATION_IN_PROGRESS\")",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));",
													"pm.environment.set(\"agreementId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"apiOperation\":\"INITIATE_AUTHENTICATION\",\n   \"authentication\":{  \n      \"channel\":\"PAYER_BROWSER\",\n      \"purpose\":\"ADD_CARD\"\n   },\n   \"order\":{  \n      \"currency\":\"{{currency}}\"\n   },\n\t\"sourceOfFunds\":{  \n    \t\"provided\":{  \n        \t\"card\":{  \n            \t\"number\":\"{{fpan}}\"\n    \t\t}\n    \t}\n\t}\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Method URL (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var actionStart = responseBody.indexOf('action=\"') + 'action=\"'.length;",
													"var actionEnd = responseBody.indexOf('\"', actionStart);",
													"var action = responseBody.substring(actionStart, actionEnd);",
													"pm.environment.set(\"3DS2acsURL\", action);",
													"console.log(action);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "threeDSMethodData",
													"value": "{{threeDSMethodPostData}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}/acs/mastercard/v2/method",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"acs",
												"mastercard",
												"v2",
												"method"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Method Complete Callback (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{3DS2acsURL}}",
											"host": [
												"{{3DS2acsURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. AUTHENTICATE PAYER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var redirectHtml = jsonData.authentication.redirect.html;",
													"var actionStart = redirectHtml.indexOf('action=\\\"') + 'action=\\\"'.length;",
													"var actionEnd = redirectHtml.indexOf('\"', actionStart);",
													"var action = redirectHtml.substring(actionStart, actionEnd);",
													"pm.environment.set(\"3DS2acsURL\", action);",
													"",
													"pm.environment.set(\"gatewayRecommendation\", jsonData.response.gatewayRecommendation);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is APPROVED\", () => {",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"APPROVED\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"sourceOfFunds\": {\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n   },\n   \"order\": {\n   \t\t\"amount\": \"0\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n  \"authentication\": {\n  \t\"redirectResponseUrl\": \"https://{{host}}/api/documentation/integrationGuidelines/index.html\"\n  },\n  \"device\": {\n    \"browser\": \"MOZILLA\",\n    \"browserDetails\": {\n      \"3DSecureChallengeWindowSize\": \"FULL_SCREEN\",\n      \"acceptHeaders\": \"application/json\",\n      \"colorDepth\": 24,\n      \"javaEnabled\": true,\n      \"language\": \"en-US\",\n      \"screenHeight\": 640,\n      \"screenWidth\": 480,\n      \"timeZone\": 273\n    },\n    \"ipAddress\": \"127.0.0.1\"\n  },\n  \"apiOperation\": \"AUTHENTICATE_PAYER\"\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Redirect (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "order.id",
													"value": "{{orderId}}",
													"type": "text"
												},
												{
													"key": "transaction.id",
													"value": "1",
													"type": "text"
												},
												{
													"key": "response.gatewayRecommendation",
													"value": "{{gatewayRecommendation}}",
													"type": "text"
												},
												{
													"key": "result",
													"value": "{{gatewayRecommendation}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{3DS2acsURL}}",
											"host": [
												"{{3DS2acsURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. VERIFY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});\r",
													"postman.setNextRequest(\"1. INITIATE AUTHENTICATION\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "TNSI_TOGGLES_ON",
												"value": "Enable new 3DS API",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n\t\"apiOperation\":\"VERIFY\",\n\t\"authentication\":{\n\t\t\"transactionId\":\"1\"\n\t},\n\t\"sourceOfFunds\":{\n\t\t\"provided\":{  \n        \t\"card\":{  \n            \t\"number\":\"{{fpan}}\",\n            \t\"expiry\":{\n            \t\t\"month\":\"{{expMonth}}\",\n            \t\t\"year\":\"{{expYear}}\"\n            \t},\n                \"storedOnFile\": \"TO_BE_STORED\"\n        \t}\n    \t},\n    \t\"type\":\"CARD\"\n\t},\n\t\"order\": {\n\t\t\"currency\": \"{{currency}}\"\n\t}\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"2"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Authentication with Click to Pay Hosted Session",
							"item": [
								{
									"name": "1. CREATE SESSION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"session\", jsonData.session.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGVtbw==",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"session\": {\r\n\t\t\"authenticationLimit\": 25\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"session"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. UPDATE SESSION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var date = new Date();\r",
													"var orderId = date.getTime().toString();\r",
													"postman.setEnvironmentVariable(\"orderId\", orderId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGVtbw==",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n   \"authentication\":{  \r\n      \"channel\":\"PAYER_BROWSER\",\r\n  \t  \"redirectResponseUrl\": \"https://{{host}}/api/documentation/integrationGuidelines/index.html\"\r\n   },\r\n   \"order\":{  \r\n      \"currency\":\"{{currency}}\",\r\n      \"amount\":\"100.00\",\r\n      \"id\":\"{{orderId}}\"\r\n   }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"session",
												"{{sessionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. UPDATE SESSION FROM WALLET",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic ZGVtbw==",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"apiOperation\": \"UPDATE_SESSION_FROM_WALLET\",\r\n\t\"order\": {\r\n\t\t\"walletProvider\": \"SECURE_REMOTE_COMMERCE\"\r\n\t},\r\n\t\"wallet\": {\r\n\t\t\"secureRemoteCommerce\": {\r\n\t\t\t\"scheme\": \"MASTERCARD\",\r\n\t\t\t\"srcCorrelationId\": \"4f339be7.a46d9813-fc9f-4544-9b72-394b21203217\"\r\n\t\t}\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"session",
												"{{sessionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. INITIATE AUTHENTICATION (Browser)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var redirectHtml = jsonData.authentication.redirectHtml;",
													"",
													"var methodStart = redirectHtml.indexOf('threeDSMethodData\\\" value=\\\"') + 'threeDSMethodData\\\" value=\\\"'.length;",
													"var methodEnd = redirectHtml.indexOf('\"', methodStart);",
													"var method = redirectHtml.substring(methodStart, methodEnd);",
													"pm.globals.set(\"method\", method);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{sessionId}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"apiOperation\":\"INITIATE_AUTHENTICATION\",\n   \"session\":{  \n      \"id\":\"{{sessionId}}\"\n   }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/three",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"three"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. AUTHENTICATE PAYER (Browser)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var redirectHtml = jsonData.authentication.redirectHtml;",
													"var actionStart = redirectHtml.indexOf('action=\\\"') + 'action=\\\"'.length;",
													"var actionEnd = redirectHtml.indexOf('\"', actionStart);",
													"var action = redirectHtml.substring(actionStart, actionEnd);",
													"pm.globals.set(\"action\", action);",
													"",
													"var creqStart = redirectHtml.indexOf('creq\\\" value=\\\"') + 'creq\\\" value=\\\"'.length;",
													"var creqEnd = redirectHtml.indexOf('\"', creqStart);",
													"var creq = redirectHtml.substring(creqStart, creqEnd);",
													"pm.globals.set(\"creq\", creq);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{sessionId}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"session\": {\n   \t\t\"id\": \"{{sessionId}}\"\n   },\n  \"device\": {\n    \"browser\": \"MOZILLA\",\n    \"browserDetails\": {\n      \"3DSecureChallengeWindowSize\": \"FULL_SCREEN\",\n      \"acceptHeaders\": \"application/json\",\n      \"colorDepth\": 24,\n      \"javaEnabled\": true,\n      \"language\": \"en-US\",\n      \"screenHeight\": 640,\n      \"screenWidth\": 480,\n      \"timeZone\": 273\n    },\n    \"ipAddress\": \"127.0.0.1\"\n  },\n  \"apiOperation\": \"AUTHENTICATE_PAYER\"\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/three",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"three"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. AUTHORIZE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{sessionId}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGVtbw==",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n\t\"authentication\":{\r\n\t\t\"transactionId\":\"three\"\r\n\t},\r\n   \"session\": {\r\n   \t\t\"id\": \"{{sessionId}}\"\r\n   \t}\r\n}\r\n"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Authentication as Aggregator",
							"item": [
								{
									"name": "1. INITIATE AUTHENTICATION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"var redirectHtml = jsonData.authentication.redirect.html;\r",
													"\r",
													"var methodStart = redirectHtml.indexOf('threeDSMethodData\\\" value=\\\"') + 'threeDSMethodData\\\" value=\\\"'.length;\r",
													"var methodEnd = redirectHtml.indexOf('\"', methodStart);\r",
													"var method = redirectHtml.substring(methodStart, methodEnd);\r",
													"pm.environment.set(\"threeDSMethodPostData\", method);\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is AUTHENTICATION_IN_PROGRESS\", () => {\r",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"AUTHENTICATION_IN_PROGRESS\")\r",
													"});\r",
													"console.log(pm.info.requestId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"apiOperation\": \"INITIATE_AUTHENTICATION\",\n\t\"authentication\": {\n\t\t\"acceptVersions\": \"3DS2\",\n\t\t\"channel\": \"PAYER_BROWSER\",\n\t\t\"purpose\": \"PAYMENT_TRANSACTION\"\n\t},\n\t\"order\": {\n\t\t\"currency\": \"{{currency}}\",\n\t\t\"subMerchant\": {\n\t\t\t\"identifier\": \"828680860811\",\n\t\t\t\"tradingName\": \"Visa MP1\",\n\t\t\t\"address\": {\n\t\t\t\t\"city\": \"Pune\",\n\t\t\t\t\"company\": \"Pune\",\n\t\t\t\t\"country\": \"IND\",\n\t\t\t\t\"postcodeZip\": \"411047\",\n\t\t\t\t\"stateProvince\": \"Pun\",\n\t\t\t\t\"street\": \"Pune\",\n\t\t\t\t\"street2\": \"Pune\"\n\t\t\t},\n\t\t\t\"bankIndustryCode\": \"1324\",\n\t\t\t\"email\": \"test@noreply.com\",\n\t\t\t\"websiteUrl\": \"https://test@noreply.com\",\n\t\t\t\"phone\": \"00000000\",\n\t\t\t\"disputeContactPhone\": \"+91 00000000\",\n\t\t\t\"registeredName\": \"MPGS\",\n\t\t\t\"marketplaceId\": \"AMAZONMAR!!\",\n\t\t\t\"governmentCountryCode\": \"IND\"\n\t\t}\n\t},\n\t\"sourceOfFunds\": {\n\t\t\"provided\": {\n\t\t\t\"card\": {\n\t\t\t\t\"number\": \"{{fpan}}\"\n\t\t\t}\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Method URL (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var actionStart = responseBody.indexOf('action=\"') + 'action=\"'.length;",
													"var actionEnd = responseBody.indexOf('\"', actionStart);",
													"var action = responseBody.substring(actionStart, actionEnd);",
													"pm.environment.set(\"3DS2acsURL\", action);",
													"console.log(action);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "threeDSMethodData",
													"value": "{{threeDSMethodPostData}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}/acs/mastercard/v2/method",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"acs",
												"mastercard",
												"v2",
												"method"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Method Complete Callback (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{3DS2acsURL}}",
											"host": [
												"{{3DS2acsURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. AUTHENTICATE PAYER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var redirectHtml = jsonData.authentication.redirect.html;",
													"var actionStart = redirectHtml.indexOf('action=\\\"') + 'action=\\\"'.length;",
													"var actionEnd = redirectHtml.indexOf('\"', actionStart);",
													"var action = redirectHtml.substring(actionStart, actionEnd);",
													"pm.environment.set(\"3DS2acsURL\", action);",
													"",
													"pm.environment.set(\"gatewayRecommendation\", jsonData.response.gatewayRecommendation);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is APPROVED\", () => {",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"APPROVED\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"apiOperation\": \"AUTHENTICATE_PAYER\",\n  \"authentication\": {\n    \"redirectResponseUrl\": \"https://{{host}}/api/documentation/integrationGuidelines/index.html\"\n  },\n  \"order\": {\n    \"currency\": \"{{currency}}\",\n    \"amount\": 101.00\n  },\n  \"sourceOfFunds\": {\n    \"provided\": {\n      \"card\": {\n        \"number\": \"{{fpan}}\",\n        \"expiry\": {\n          \"month\": \"{{expMonth}}\",\n          \"year\": \"{{expYear}}\"\n        }\n      }\n    }\n  },\n  \"device\": {\n    \"browser\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\",\n    \"browserDetails\": {\n      \"3DSecureChallengeWindowSize\": \"FULL_SCREEN\",\n      \"javaEnabled\": false,\n      \"language\": \"en-US\",\n      \"screenHeight\": 768,\n      \"screenWidth\": 1366,\n      \"timeZone\": -480,\n      \"colorDepth\": 24\n    }\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Redirect (Auto)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "order.id",
													"value": "{{orderId}}",
													"type": "text"
												},
												{
													"key": "transaction.id",
													"value": "1",
													"type": "text"
												},
												{
													"key": "response.gatewayRecommendation",
													"value": "{{gatewayRecommendation}}",
													"type": "text"
												},
												{
													"key": "result",
													"value": "{{gatewayRecommendation}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{3DS2acsURL}}",
											"host": [
												"{{3DS2acsURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. AUTHORIZE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "TNSI_TOGGLES_ON",
												"value": "Enable new 3DS API",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"apiOperation\": \"AUTHORIZE\",\n    \"authentication\": {\n        \"transactionId\": \"1\"\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n                \"expiry\": {\n                    \"month\": \"{{expMonth}}\",\n                    \"year\": \"{{expYear}}\"\n                },\n                \"securityCode\": \"{{securityCode}}\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"order\": {\n        \"currency\": \"{{currency}}\",\n        \"amount\": \"100.00\"\n    },\n    \"transaction\": {\n        \"source\": \"INTERNET\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"2"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "username",
								"value": "merchant.{{merchantId}}",
								"type": "string"
							},
							{
								"key": "password",
								"value": "{{apiPassword}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Tokenization",
					"item": [
						{
							"name": "Create Gateway Tokens",
							"item": [
								{
									"name": "CREATE OR UPDATE merchant-supplied TOKEN with a session ID",
									"item": [
										{
											"name": "1. Create Session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"sessionId\", jsonData.session.id);",
															"",
															"pm.test(\"Status code is 200 or 201\", () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
															"});",
															"",
															"pm.test(\"Result is SUCCESS\", () => {",
															"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"session",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "2. CREATE OR UPDATE merchant-supplied TOKEN",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"tokenId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"1 east street\",\n            \"city\": \"1234\",\n            \"stateProvince\": \"08\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"AUS\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"Bill Smith Jones\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"Bob\",\n    \t\"lastName\": \"Smith\",\n    \t\"taxRegistrationId\": \"tax-id-133\",\n        \"email\": \"mark@mc.com.fu\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/{{tokenId}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"token",
														"{{tokenId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Update Session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Update Status is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.session.updateStatus).to.eql(\"SUCCESS\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token\": \"{{tokenId}}\",\n    \"billing\": {\n        \"address\": {\n            \"street\": \"1 east street\",\n            \"street2\": \"token_metadata\",\n            \"city\": \"1234\",\n            \"stateProvince\": \"08\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"AUS\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"paypal\": {\n                \"billingAgreement\": \n                {\n                    \"description\":\"abc\",\n                    \"name\":\"abc\",\n                    \"cardinality\": \"SINGLE\"\n                }\n            }\n        }\n    },\n    \"customer\": {\n    \t\"firstName\": \"Bill\",\n    \t\"lastName\": \"Brown\",\n    \t\"taxRegistrationId\": \"tax-id-133\",\n        \"email\": \"mark@mc.com.fu\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"session",
														"{{sessionId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. RETRIEVE SESSION",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Update Status is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.session.updateStatus).to.eql(\"SUCCESS\")\r",
															"});\r",
															"\r",
															"pm.test(\"Token is present\", () => {\r",
															"    pm.expect(responseJson.token).to.contain(pm.environment.get(\"tokenId\"))\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/session/{{sessionId}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"session",
														"{{sessionId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CREATE OR UPDATE merchant-supplied TOKEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"tokenId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"1 east street\",\n            \"city\": \"1234\",\n            \"stateProvince\": \"08\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"AUS\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"Bill Smith Jones\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"Bob\",\n    \t\"lastName\": \"Smith\",\n    \t\"taxRegistrationId\": \"tax-id-133\",\n        \"email\": \"mark@mc.com.fu\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/{{tokenId}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"token",
												"{{tokenId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE OR UPDATE system-supplied TOKEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"1 east street\",\n            \"city\": \"1234\",\n            \"stateProvince\": \"08\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"AUS\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"Bill Smith Jones\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"Bob\",\n    \t\"lastName\": \"Smith\",\n    \t\"taxRegistrationId\": \"tax-id-133\",\n        \"email\": \"mark@mc.com.fu\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"token",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Search Tokens",
							"item": [
								{
									"name": "1. CREATE OR UPDATE first TOKEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"123 Test Avenue\",\n            \"city\": \"New York\",\n            \"stateProvince\": \"NY\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"USA\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"Bill Smith Jones\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"testFirstName01\",\n    \t\"lastName\": \"testLastName01\",\n    \t\"taxRegistrationId\": \"testTaxId01\",\n        \"email\": \"test01@testaccount.com\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"token",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "2. CREATE OR UPDATE second TOKEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"123 Test Avenue\",\n            \"city\": \"New York\",\n            \"stateProvince\": \"NY\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"USA\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpanAdditional}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonthAdditional}}\",\n   \t\t\t\t\t\"year\": \"{{expYearAdditional}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"Bill Smith Jones\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"testFirstName01\",\n    \t\"lastName\": \"testLastName01\",\n    \t\"taxRegistrationId\": \"testTaxId01\",\n        \"email\": \"test01@testaccount.com\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"token",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "3. SEARCH TOKENS with specific expiry",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"nextPage\", jsonData.nextPage);\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/tokenSearch?query=%7B%22LE%22%3A%5B%22sourceOfFunds.provided.card.expiry%22%2C%221142%22%5D%7D&limit=1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"tokenSearch"
											],
											"query": [
												{
													"key": "query",
													"value": "%7B%22LE%22%3A%5B%22sourceOfFunds.provided.card.expiry%22%2C%221142%22%5D%7D"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4. SEARCH TOKENS to show the next result page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/tokenSearch?query=%7B%22LE%22%3A%5B%22sourceOfFunds.provided.card.expiry%22%2C%221142%22%5D%7D&limit=1&nextPage={{nextPage}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"tokenSearch"
											],
											"query": [
												{
													"key": "query",
													"value": "%7B%22LE%22%3A%5B%22sourceOfFunds.provided.card.expiry%22%2C%221142%22%5D%7D"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "nextPage",
													"value": "{{nextPage}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Tokens",
							"item": [
								{
									"name": "1. CREATE OR UPDATE TOKEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"tokenId\", jsonData.token);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"123 Test Avenue\",\n            \"city\": \"New York\",\n            \"stateProvince\": \"NY\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"USA\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"Bill Smith Jones\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"testFirstName01\",\n    \t\"lastName\": \"testLastName01\",\n    \t\"taxRegistrationId\": \"testTaxId01\",\n        \"email\": \"test01@testaccount.com\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"token",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "2. DELETE TOKEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/{{tokenId}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"token",
												"{{tokenId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Gateway Tokens",
							"item": [
								{
									"name": "1. CREATE TOKEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"tokenId\", jsonData.token);",
													"",
													"pm.test(\"Status code is 200 or 201\", () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
													"});",
													"",
													"pm.test(\"Result is SUCCESS\", () => {",
													"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
													"});",
													" ",
													"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {",
													"    pm.expect(jsonData.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"123 Test Avenue\",\n            \"city\": \"New York\",\n            \"stateProvince\": \"NY\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"USA\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"Bill Smith Jones\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"testFirstName01\",\n    \t\"lastName\": \"testLastName01\",\n    \t\"taxRegistrationId\": \"testTaxId01\",\n        \"email\": \"test01@testaccount.com\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"token",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "2. UPDATE TOKEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"234 Experiment Road\",\n            \"city\": \"Providence\",\n            \"stateProvince\": \"RI\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"USA\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"William Jones Smith\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"testFirstName01\",\n    \t\"lastName\": \"testLastName01\",\n    \t\"taxRegistrationId\": \"testTaxId01\",\n        \"email\": \"test01@testaccount.com\",\n        \"mobilePhone\": \"+1 555 234 5678\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/{{tokenId}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"token",
												"{{tokenId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Using Gateway Tokens",
							"item": [
								{
									"name": "1. CREATE OR UPDATE TOKEN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"tokenId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"123 Test Avenue\",\n            \"city\": \"New York\",\n            \"stateProvince\": \"NY\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"USA\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"Bill Smith Jones\",\n        \"securityCode\": \"{{securityCode}}\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"testFirstName01\",\n    \t\"lastName\": \"testLastName01\",\n    \t\"taxRegistrationId\": \"testTaxId01\",\n        \"email\": \"test01@testaccount.com\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token/{{tokenId}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"token",
												"{{tokenId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. AUTHORIZE with a token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGVtbw==",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"token\": \"{{tokenId}}\",\r\n        \"provided\":{\r\n            \"card\": {\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n   }\r\n}\r\n"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Using Network Tokens",
							"item": [
								{
									"name": "PAY with a token",
									"item": [
										{
											"name": "1. Create Scheme Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"pm.environment.set(\"tokenId\", jsonData.token);\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {\r",
															"    pm.expect(jsonData.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")\r",
															"});\r",
															"\r",
															"setTimeout(() => {}, 15000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "merchant.TEST{{merchantId}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "text/plain; charset=UTF-8",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sourceOfFunds\": {\n        \"type\": \"CARD\",\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n                \"expiry\": {\n                    \"month\": \"{{expMonth}}\",\n                    \"year\": \"{{expYear}}\"\n                }\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/TEST{{merchantId}}/token/",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"TEST{{merchantId}}",
														"token",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "2. PAY With Scheme Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});\r",
															"\r",
															"pm.test(\"Token type is SCHEME_TOKEN\", () => {\r",
															"    pm.expect(responseJson.sourceOfFunds.type).to.contain(\"SCHEME_TOKEN\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.TEST{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "text/plain; charset=UTF-8",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"agreement\": {\n        \"amountVariability\": \"FIXED\",\n        \"type\": \"RECURRING\",\n        \"id\": \"AGMTb096e648Xf009X44deXb\"\n    },\n    \"apiOperation\": \"PAY\",\n    \"sourceOfFunds\": {\n        \"token\": \"{{tokenId}}\",\n        \"provided\": {\n            \"card\": {\n                \"storedOnFile\": \"TO_BE_STORED\",\n                \"securityCode\": {{securityCode}}\n            }\n        }\n    },\n    \"order\": {\n        \"amount\": \"10\",\n        \"currency\": \"{{currency}}\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/TEST{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"TEST{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Credential on File and Merchant-initiated Transactions (MIT)",
					"item": [
						{
							"name": "Direct Payment",
							"item": [
								{
									"name": "Multiple CITs",
									"item": [
										{
											"name": "1. PAY",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}},\n                \"storedOnFile\": \"TO_BE_STORED\"\n   \t\t\t}\n   \t\t}\n   },\n   \"transaction\": {\n       \"source\": \"INTERNET\"\n   }\n}"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. CREATE OR UPDATE TOKEN",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"tokenId\", jsonData.token);",
															"",
															"pm.test(\"Status code is 200 or 201\", () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
															"});",
															"",
															"pm.test(\"Result is SUCCESS\", () => {",
															"    pm.expect(jsonData.result).to.eql(\"SUCCESS\")",
															"});",
															" ",
															"pm.test(\"Gateway Code is BASIC_VERIFICATION_SUCCESSFUL\", () => {",
															"    pm.expect(jsonData.response.gatewayCode).to.contain(\"BASIC_VERIFICATION_SUCCESSFUL\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic bWVyY2hhbnQuRFlMQU5fTUVSQ0g6OTJkODgzNzkxMmQxZDcxZWY0NzA4NDg2NTgxNTk0Yjg="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"billing\": {\n        \"address\": {\n            \"street\": \"1 east street\",\n            \"city\": \"1234\",\n            \"stateProvince\": \"08\",\n            \"postcodeZip\": \"2012\",\n            \"country\": \"AUS\"\n        }\n    },\n    \"sourceOfFunds\": {\n        \"provided\": {\n            \"card\": {\n                \"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n                \"nameOnCard\": \"Bill Smith Jones\"\n            }\n        },\n        \"type\": \"CARD\"\n    },\n    \"customer\": {\n    \t\"firstName\": \"Bob\",\n    \t\"lastName\": \"Smith\",\n    \t\"taxRegistrationId\": \"tax-id-133\",\n        \"email\": \"mark@mc.com.fu\",\n        \"mobilePhone\": \"0493049\",\n        \"phone\": \"9320490\"\n    },\n    \"transaction\": {\n    \t\"currency\": \"{{currency}}\"\n    }\n}"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/token",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. PAY with token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n        \"token\": \"{{tokenId}}\",\n        \"type\": \"CARD\",\n        \"provided\": {\n            \"card\": {\n                \"securityCode\" : {{securityCode}},\n                \"storedOnFile\": \"STORED\"\n            }\n        }\n    }\n}"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Recurring Payments",
									"item": [
										{
											"name": "1. PAY CIT with Recurring Agreement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"agreement\": {\n      \"id\": \"AGID_001\",\n      \"type\": \"RECURRING\",\n      \"amountVariability\": \"FIXED\"\n   },\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}},\n                \"storedOnFile\": \"TO_BE_STORED\"\n   \t\t\t}\n                },\n             \"type\": \"CARD\"\n     },\n    \"transaction\": {\n        \"source\": \"INTERNET\"\n    }\n}\n"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Recurring PAY MIT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"agreement\": {\n      \"id\": \"AGID_001\",\n      \"type\": \"RECURRING\",\n      \"amountVariability\": \"FIXED\"\n   },\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}},\n                \"storedOnFile\": \"STORED\"\n   \t\t\t}\n                },\n             \"type\": \"CARD\"\n     },\n    \"transaction\": {\n        \"source\": \"MERCHANT\"\n    }\n}\n"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Installment Payments",
									"item": [
										{
											"name": "PAY CIT with Installment Agreement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"agreement\": {\n      \"id\": \"AGID_002\",\n      \"type\": \"INSTALLMENT\"\n   },\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n \n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}},\n                \"storedOnFile\": \"TO_BE_STORED\"\n   \t\t\t}\n                },\n             \"type\": \"CARD\"\n     },\n    \"transaction\": {\n        \"source\": \"INTERNET\"\n    }\n}\n"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Unscheduled Payments",
									"item": [
										{
											"name": "1. PAY CIT with Unscheduled Agreement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"agreement\": {\n      \"id\": \"AGID_003\",\n      \"type\": \"UNSCHEDULED\"\n   },\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}},\n                \"storedOnFile\": \"TO_BE_STORED\"\n   \t\t\t}\n                },\n             \"type\": \"CARD\"\n     },\n    \"transaction\": {\n        \"source\": \"INTERNET\"\n    }\n}\n"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Unscheduled PAY MIT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"agreement\": {\n      \"id\": \"AGID_003\",\n      \"type\": \"UNSCHEDULED\"\n   },\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}},\n                \"storedOnFile\": \"STORED\"\n   \t\t\t}\n                },\n             \"type\": \"CARD\"\n     },\n    \"transaction\": {\n        \"source\": \"MERCHANT\"\n    }\n}\n"
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Fraud Management",
					"item": [
						{
							"name": "Address Verification Service",
							"item": [
								{
									"name": "PAY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Gateway Code is APPROVED\", () => {\r",
													"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orderId\", _.random(1,999999999));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"billing\": {\n        \"address\": {\n        \"postcodeZip\": \"CR1 012\",\n        \"street\": \"Alpha St\"\n        }\n    },\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}}\n   \t\t\t}\n   \t\t}\n   }\n}"
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"order",
												"{{orderId}}",
												"transaction",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Risk Assessment",
							"item": [
								{
									"name": "Auhorize",
									"item": [
										{
											"name": "AUTHORIZE with RISK ACCEPT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "TNSI_TOGGLES_ON",
														"value": "Adding Callback-Url in Risk SPI",
														"type": "default",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"apiOperation\": \"AUTHORIZE\",\r\n    \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"number\": \"{{fpan}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"order\": {\r\n        \"currency\": \"{{currency}}\",\r\n        \"amount\": \"100\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "AUTHORIZE with RISK REJECT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is FAILURE\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"FAILURE\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is BLOCKED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BLOCKED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "TNSI_TOGGLES_ON",
														"value": "Adding Callback-Url in Risk SPI",
														"type": "default",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"apiOperation\": \"AUTHORIZE\",\r\n    \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"number\": \"{{fpan}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"order\": {\r\n        \"currency\": \"{{currency}}\",\r\n        \"amount\": \"100\",\r\n        \"description\": \"riskAssessmentResultReject\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Pay",
									"item": [
										{
											"name": "PAY with RISK ACCEPT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "TNSI_TOGGLES_ON",
														"value": "Adding Callback-Url in Risk SPI",
														"type": "default",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"apiOperation\": \"PAY\",\r\n    \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"number\": \"{{fpan}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"order\": {\r\n        \"currency\": \"{{currency}}\",\r\n        \"amount\": \"100\"\r\n       \r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "PAY with RISK REJECT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is FAILURE\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"FAILURE\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is BLOCKED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BLOCKED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "TNSI_TOGGLES_ON",
														"value": "Adding Callback-Url in Risk SPI",
														"type": "default",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"apiOperation\": \"PAY\",\r\n    \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"number\": \"{{fpanAdditional}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"order\": {\r\n        \"currency\": \"{{currency}}\",\r\n        \"amount\": \"100\",\r\n        \"description\":\"riskAssessmentResultReject\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Standalone Capture",
									"item": [
										{
											"name": "STANDALONE CAPTURE with RISK ACCEPT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "TNSI_TOGGLES_ON",
														"value": "Adding Callback-Url in Risk SPI",
														"type": "default",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"apiOperation\": \"CAPTURE\",\r\n    \"shipping\": {\r\n        \"contact\": {\r\n            \"lastName\": \"Naidoo\",\r\n            \"phone\": \"01987652221\",\r\n            \"mobilePhone\": \"0478965221\",\r\n            \"email\": \"claudia.naidoo@mastercard.com\",\r\n            \"firstName\": \"Claudia\"\r\n        }\r\n    },\r\n    \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"number\": \"{{fpan}}\",\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"transaction\": {\r\n        \"authorizationCode\": \"{{authorizationCode}}\",\r\n        \"amount\": \"100.00\",\r\n        \"currency\": \"{{currency}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant//{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "STANDALONE CAPTURE with RISK REJECT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is FAILURE\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"FAILURE\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is BLOCKED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BLOCKED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "TNSI_TOGGLES_ON",
														"value": "Adding Callback-Url in Risk SPI",
														"type": "default",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"apiOperation\": \"CAPTURE\",\r\n   \r\n    \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"number\": \"{{fpan}}\",\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"transaction\": {\r\n        \"authorizationCode\": \"{{authorizationCode}}\",\r\n        \"amount\": \"20.20\",\r\n        \"currency\": \"{{currency}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Verify",
									"item": [
										{
											"name": "VERIFY with RISK ACCEPT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is SUCCESS\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is APPROVED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "TNSI_TOGGLES_ON",
														"value": "Adding Callback-Url in Risk SPI",
														"type": "default",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"apiOperation\": \"VERIFY\",\r\n    \"order\": {\r\n        \"currency\": \"{{currency}}\",\r\n        \"amount\": \"10\"\r\n    },\r\n    \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"nameOnCard\": \"Int Review Ext Acc\",\r\n                \"number\": \"{{fpan}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "VERIFY with RISK REJECT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orderId\", _.random(1,999999999));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200 or 201\", () => {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
															"});\r",
															"\r",
															"pm.test(\"Result is FAILURE\", () => {\r",
															"    pm.expect(responseJson.result).to.eql(\"FAILURE\")\r",
															"});\r",
															" \r",
															"pm.test(\"Gateway Code is BLOCKED\", () => {\r",
															"    pm.expect(responseJson.response.gatewayCode).to.contain(\"BLOCKED\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{apiPassword}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "merchant.{{merchantId}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "TNSI_TOGGLES_ON",
														"value": "Adding Callback-Url in Risk SPI",
														"type": "default",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"apiOperation\": \"VERIFY\",\r\n    \"order\": {\r\n        \"currency\": \"{{currency}}\",\r\n        \"amount\": \"20\"\r\n    },\r\n    \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"nameOnCard\": \"Int Review Ext Acc\",\r\n                \"number\": \"{{fpan}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"shipping\": {\r\n        \"contact\": {\r\n            \"phone\": \"019876522020\",\r\n            \"mobilePhone\": \"047896520020\"\r\n        }\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"rest",
														"version",
														"100",
														"merchant",
														"{{merchantId}}",
														"order",
														"{{orderId}}",
														"transaction",
														"1"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Standalone Risk Assessment",
							"item": [
								{
									"name": "Create or Update Risk Assessment ACCEPT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"riskassessmentId\", _.random(1,999999999));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Recommendation is ACCEPT\", () => {\r",
													"    pm.expect(responseJson.recommendation).to.eql(\"ACCEPT\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"apiOperation\": \"CREATE_OR_UPDATE_RISK_ASSESSMENT\",\r\n    \"requestAction\": \"RISK_ASSESSMENT\",\r\n    \"order\": {\r\n        \"merchantCategoryCode\": \"4148\",\r\n        \"amount\": \"1550\",\r\n        \"currency\": \"{{currency}}\"\r\n    },\r\n   \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"number\": \"{{fpan}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"transaction\": {\r\n        \"creationDate\": \"2020-10-04T05:02:03.002Z\",\r\n        \"source\": \"CARD_PRESENT\",\r\n        \"type\": \"AUTHORIZATION\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/riskassessment/{{riskassessmentId}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"riskassessment",
												"{{riskassessmentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create or Update Risk Assessment REJECT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"riskassessmentId\", _.random(1,999999999));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" \r",
													"pm.test(\"Recommendation is REJECT\", () => {\r",
													"    pm.expect(responseJson.recommendation).to.eql(\"REJECT\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"apiOperation\": \"CREATE_OR_UPDATE_RISK_ASSESSMENT\",\r\n    \"requestAction\": \"RISK_ASSESSMENT\",\r\n    \"order\": {\r\n        \"merchantCategoryCode\": \"9786\",\r\n        \"amount\": \"1550\",\r\n        \"currency\": \"{{currency}}\"\r\n    },\r\n   \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"number\": \"{{fpan}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"transaction\": {\r\n        \"creationDate\": \"2020-10-04T05:02:03.002Z\",\r\n        \"source\": \"CARD_PRESENT\",\r\n        \"type\": \"AUTHORIZATION\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/riskassessment/{{riskassessmentId}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"riskassessment",
												"{{riskassessmentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create or Update RISK INFORMATION_ONLY",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"riskassessmentId\", _.random(1,999999999));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 or 201\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
													"});\r",
													"\r",
													"pm.test(\"Result is SUCCESS\", () => {\r",
													"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
													"});\r",
													" "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{apiPassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "merchant.{{merchantId}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"apiOperation\": \"CREATE_OR_UPDATE_RISK_ASSESSMENT\",\r\n    \"requestAction\": \"INFORMATION_ONLY\",\r\n    \"order\": {\r\n        \"merchantCategoryCode\": \"4148\",\r\n        \"amount\": \"1550\",\r\n        \"currency\": \"{{currency}}\"\r\n    },\r\n   \"sourceOfFunds\": {\r\n        \"type\": \"CARD\",\r\n        \"provided\": {\r\n            \"card\": {\r\n                \"number\": \"{{fpan}}\",\r\n                \"expiry\": {\r\n                    \"month\": \"{{expMonth}}\",\r\n                    \"year\": \"{{expYear}}\"\r\n                },\r\n                \"securityCode\": \"{{securityCode}}\"\r\n            }\r\n        }\r\n    },\r\n    \"transaction\": {\r\n        \"creationDate\": \"2020-10-04T05:02:03.002Z\",\r\n        \"source\": \"CARD_PRESENT\",\r\n        \"type\": \"AUTHORIZATION\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/riskassessment/{{riskassessmentId}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"rest",
												"version",
												"100",
												"merchant",
												"{{merchantId}}",
												"riskassessment",
												"{{riskassessmentId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"description": "Contains requests examples for the following security and fraud prevention features:\n\n- 3D Secure (3DS) authentication\n    \n- Tokenizing card data for greater security\n- Storing card information (Credential On File) and using it for merchant-initiated transactions\n    \n- Risk management"
		},
		{
			"name": "Features",
			"item": [
				{
					"name": "Check Gateway",
					"item": [
						{
							"name": "CHECK GATEWAY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/information",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"information"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment Options Inquiries",
					"item": [
						{
							"name": "PAYMENT OPTIONS INQUIRY for all options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/paymentOptionsInquiry",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"paymentOptionsInquiry"
									]
								}
							},
							"response": []
						},
						{
							"name": "PAYMENT OPTIONS INQUIRY for options supported for a specific card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var cardPrefix = postman.getEnvironmentVariable(\"fpan\");\r",
											"cardPrefix = cardPrefix.substring(0, 10);\r",
											"pm.environment.set(\"cardPrefix\", cardPrefix);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceOfFunds\": {\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"prefix\": \"{{cardPrefix}}\"\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/paymentOptionsInquiry",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"paymentOptionsInquiry"
									]
								}
							},
							"response": []
						},
						{
							"name": "PAYMENT OPTIONS INQUIRY for DCC rate quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var cardPrefix = postman.getEnvironmentVariable(\"fpan\");\r",
											"cardPrefix = cardPrefix.substring(0, 10);\r",
											"pm.environment.set(\"cardPrefix\", cardPrefix);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"order\":{\r\n        \"amount\":\"10\",\r\n        \"currency\":\"{{currency}}\"\r\n    },\r\n    \"sourceOfFunds\":{\r\n        \"provided\":{\r\n            \"card\":{\r\n                \"prefix\":\"{{cardPrefix}}\"\r\n            }\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/paymentOptionsInquiry",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"paymentOptionsInquiry"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Aggregator",
					"item": [
						{
							"name": "PAY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\",\n        \"subMerchant\": {\n            \"address\": {\n                \"city\": \"New York\",\n                \"company\": \"JK Imports Inc.\",\n                \"country\": \"USA\",\n                \"postcodeZip\": \"00000\",\n                \"stateProvince\": \"NY\",\n                \"street\": \"123 Test Ave\"\n            },\n            \"identifier\": \"JKIMPORT\",\n            \"tradingName\": \"JK Imports Inc.\"\n        }\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}}\n   \t\t\t}\n   \t\t}\n   }\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Funding Transactions (AFT)",
					"item": [
						{
							"name": "PAY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n    \"accountFunding\": {\n        \"senderType\": \"COMMERCIAL_ORGANIZATION\",\n        \"senderIsRecipient\": \"true\",\n        \"purpose\": \"OTHER\",\n        \"recipient\": { \n            \"firstName\": \"John\",\n            \"lastName\": \"Smith\",\n            \"account\": {\n                \"fundingMethod\": \"CREDIT\", \n                \"identifierType\": \"CARD_NUMBER\", \n                \"identifier\": \"1234567891234567\"\n            }\n        }\n    },\n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\",\n        \"purchaseType\": \"ACCOUNT_FUNDING\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}}\n   \t\t\t}\n   \t\t}\n   }\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Airline Data",
					"item": [
						{
							"name": "1. AUTHORIZE with basic travel data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"300.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   },\r\n   \"airline\": {\r\n        \"bookingReference\": \"MC12D8\",\r\n        \"itinerary\": {\r\n            \"leg\": [\r\n                {\r\n                    \"carrierCode\": \"MA\",\r\n                    \"departureAirport\": \"STL\",\r\n                    \"departureDate\": \"2019-06-07\",\r\n                    \"destinationAirport\": \"ORD\"\r\n                },\r\n                {\r\n                    \"carrierCode\": \"MA\",\r\n                    \"departureAirport\": \"ORD\",\r\n                    \"departureDate\": \"2019-06-09\",\r\n                    \"destinationAirport\": \"STL\"\r\n                }\r\n            ],\r\n            \"numberInParty\": \"2\"\r\n        },\r\n        \"passenger\": [\r\n            {\r\n                \"firstName\": \"JOHN\",\r\n                \"lastName\": \"SMITH\"\r\n            },\r\n            {\r\n                \"firstName\": \"JANE\",\r\n                \"lastName\": \"SMITH\"\r\n            }\r\n        ]\r\n     }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. CAPTURE ticket payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n    \"airline\": {\r\n        \"ticket\": {\r\n            \"eTicket\": \"true\",\r\n            \"issue\": {\r\n                \"carrierCode\": \"TA\",\r\n                \"carrierName\": \"TestAir\",\r\n                \"city\": \"New York\"\r\n            }\r\n        },\r\n        \"transactionType\": \"TICKET_PURCHASE\", \r\n        \"bookingReference\": \"MC12D8\",\r\n        \"itinerary\": {\r\n            \"leg\": [\r\n                {\r\n                    \"carrierCode\": \"MA\",\r\n                    \"departureAirport\": \"STL\",\r\n                    \"departureDate\": \"2019-06-07\",\r\n                    \"destinationAirport\": \"ORD\"\r\n                },\r\n                {\r\n                    \"carrierCode\": \"MA\",\r\n                    \"departureAirport\": \"ORD\",\r\n                    \"departureDate\": \"2019-06-09\",\r\n                    \"destinationAirport\": \"STL\"\r\n                }\r\n            ],\r\n            \"numberInParty\": \"2\"\r\n        },\r\n        \"passenger\": [\r\n            {\r\n                \"firstName\": \"JOHN\",\r\n                \"lastName\": \"SMITH\"\r\n            },\r\n            {\r\n                \"firstName\": \"JANE\",\r\n                \"lastName\": \"SMITH\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. CAPTURE additional baggage payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"50.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"airline\": {\r\n        \"ticket\": {\r\n            \"eTicket\": \"true\",\r\n            \"issue\": {\r\n                \"carrierCode\": \"TA\",\r\n                \"carrierName\": \"TestAir\",\r\n                \"city\": \"New York\"\r\n            }\r\n        },\r\n        \"transactionType\": \"MISCELLANEOUS_CHARGE\", \r\n        \"bookingReference\": \"MC12D8\",\r\n        \"itinerary\": {\r\n            \"leg\": [\r\n                {\r\n                    \"carrierCode\": \"MA\",\r\n                    \"departureAirport\": \"STL\",\r\n                    \"departureDate\": \"2019-06-07\",\r\n                    \"destinationAirport\": \"ORD\"\r\n                },\r\n                {\r\n                    \"carrierCode\": \"MA\",\r\n                    \"departureAirport\": \"ORD\",\r\n                    \"departureDate\": \"2019-06-09\",\r\n                    \"destinationAirport\": \"STL\"\r\n                }               \r\n            ],\r\n            \"numberInParty\": \"2\"\r\n        },\r\n        \"passenger\": [\r\n            {\r\n                \"firstName\": \"JOHN\",\r\n                \"lastName\": \"SMITH\"\r\n            },\r\n            {\r\n                \"firstName\": \"JANE\",\r\n                \"lastName\": \"SMITH\"\r\n            }           \r\n        ]\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cruise Data",
					"item": [
						{
							"name": "AUTHORIZE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"300.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   },\r\n   \"cruise\": {\r\n       \"bookingReference\": \"MC12D8\",\r\n       \"departureDate\": \"2030-01-01\",\r\n       \"departurePort\": {\r\n           \"address\" : {\r\n               \"city\": \"New York\",\r\n               \"country\": \"USA\",\r\n               \"postCodeZip\": \"00000\",\r\n               \"stateProvinceCode\": \"NY\",\r\n               \"street\": \"123 Test Ave\"\r\n           }\r\n       },\r\n       \"passenger\": [\r\n            {\r\n                \"firstName\": \"JOHN\",\r\n                \"lastName\": \"SMITH\"\r\n            },\r\n            {\r\n                \"firstName\": \"JANE\",\r\n                \"lastName\": \"SMITH\"\r\n            }           \r\n        ],\r\n        \"returnDate\": \"2030-02-02\",\r\n        \"shipName\": \"SS Essess\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customer Internet Data",
					"item": [
						{
							"name": "AUTHORIZE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"300.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   },\r\n   \"customer\" : {\r\n      \"email\": \"test@testmail.com\",\r\n      \"firstName\": \"testFirstName\",\r\n      \"lastName\": \"testLastName\",\r\n      \"mobilePhone\": \"+1 555 1234 567\"\r\n   },\r\n   \"device\": {\r\n       \"ipAddress\": \"127.0.0.1\",\r\n       \"browser\": \"Mozilla/5.0\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Debt Repayment Data",
					"item": [
						{
							"name": "PAY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\",\n        \"purchaseType\": \"DEBT_REPAYMENT\"\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}}\n   \t\t\t}\n   \t\t}\n   },\n   \"debtRepayment\": {\n       \"recipient\": {\n           \"accountIdentifier\": \"1234567891234567\",\n           \"dateOfBirth\": \"1977-01-01\",\n           \"lastName\": \"Smith\",\n           \"postcodeZip\": \"5656\"\n       }\n   }\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Level 2 and 3 Data (Including Order and Line Items)",
					"item": [
						{
							"name": "1. AUTHORIZE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n    \"customer\": {\r\n        \"taxRegistrationId\": \"BA1234\",\r\n        \"firstName\": \"John\",\r\n        \"lastName\": \"Smith\"\r\n    },\r\n    \"order\": {\r\n   \t\t\"amount\": \"206.00\",\r\n   \t\t\"currency\": \"{{currency}}\",\r\n        \"customerReference\": \"345\",\r\n        \"reference\": \"2412\",\r\n        \"invoiceNumber\": \"TEST001\",\r\n        \"customerOrderDate\": \"2022-07-22\",\r\n        \"requestorName\": \"John Smith\",\r\n        \"shippingAndHandlingTaxAmount\": 1.00,\r\n        \"shippingAndHandlingTaxRate\": 33.32,\r\n        \"localTaxRegistrationId\": \"ABCD1234\",\r\n        \"taxRegistrationId\": \"AB/CD/12-34\",\r\n        \"dutyAmount\": 1.00,\r\n        \"taxStatus\": \"NOT_EXEMPT\",\r\n        \"taxAmount\": \"15\",\r\n        \"shippingAndHandlingAmount\": \"100\",\r\n        \"tax\": [\r\n            {\r\n                \"type\": \"11\",\r\n                \"amount\": \"1.00\",\r\n                \"rate\": \"0.01\"\r\n            },\r\n            {\r\n                \"type\": \"12\",\r\n                \"amount\": \"2.00\",\r\n                \"rate\": \"0.02\"\r\n            },\r\n            {\r\n                \"type\": \"13\",\r\n                \"amount\": \"4.00\",\r\n                \"rate\": \"0.04\"\r\n            },\r\n            {\r\n                \"type\": \"14\",\r\n                \"amount\": \"5.00\",\r\n                \"rate\": \"0.05\"\r\n            }\r\n        ],\r\n        \"item\": [\r\n            {\r\n                \"name\": \"TestItem_01\",\r\n                \"brand\": \"dell\",\r\n                \"category\": \"electronics\",\r\n                \"description\": \"laptop 1TB 64GB\",\r\n                \"quantity\": \"1\",\r\n                \"unitPrice\": \"50\",\r\n                \"unitOfMeasure\": \"EA\",\r\n                \"unitDiscountAmount\": \"5.00\",\r\n                \"unitTaxAmount\": \"5\",\r\n                \"sku\": \"2\",\r\n                \"detail\": {\r\n                    \"commodityCode\": \"999992\",\r\n                    \"unitDiscountRate\": \"5\",\r\n                    \"unitTaxRate\": \"1\",\r\n                    \"unspsc\": \"1\",\r\n                    \"upc\": \"123\",\r\n                    \"tax\": [\r\n                        {\r\n                            \"amount\": \"5\",\r\n                            \"rate\": \"1\",\r\n                            \"type\": \"11\"\r\n                        },\r\n                        {\r\n                            \"amount\": \"5\",\r\n                            \"rate\": \"10.5\",\r\n                            \"type\": \"12\"\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"name\": \"TestItem_02\",\r\n                \"brand\": \"Lexus\",\r\n                \"category\": \"motorvehicles\",\r\n                \"description\": \"Lexus RX350\",\r\n                \"quantity\": \"1\",\r\n                \"unitPrice\": \"50\",\r\n                \"unitOfMeasure\": \"EA\",\r\n                \"unitDiscountAmount\": \"5.00\",\r\n                \"unitTaxAmount\": \"10\",\r\n                \"detail\": {\r\n                    \"commodityCode\": \"896292\",\r\n                    \"unitDiscountRate\": \"5\",\r\n                    \"upc\": \"999\",\r\n                    \"tax\": [\r\n                        {\r\n                            \"amount\": \"10\",\r\n                            \"rate\": \"1\",\r\n                            \"type\": \"13\"\r\n                        },\r\n                        {\r\n                            \"amount\": \"10\",\r\n                            \"rate\": \"10.5\",\r\n                            \"type\": \"14\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"shipping\": {\r\n        \"address\": {\r\n            \"street\": \"123 Main St\",\r\n            \"stateProvinceCode\": \"NY\",\r\n            \"stateProvince\": \"New York\",\r\n            \"postcodeZip\": \"10000\",\r\n            \"city\": \"New York\",\r\n            \"country\": \"USA\"\r\n        }\r\n    },\r\n    \"billing\": {\r\n        \"address\": {\r\n            \"street\": \"456 East End Ave\",\r\n            \"stateProvinceCode\": \"NY\",\r\n            \"stateProvince\": \"New York\",\r\n            \"postcodeZip\": \"10021\",\r\n            \"city\": \"New York\",\r\n            \"country\": \"USA\"\r\n        }\r\n    },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Partial CAPTURE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"50.00\",\r\n   \t\t\"currency\": \"{{currency}}\",\r\n        \"item\": [\r\n            {\r\n                \"name\": \"TestItem_01\",\r\n                \"brand\": \"dell\",\r\n                \"category\": \"electronics\",\r\n                \"description\": \"laptop 1TB 64GB\",\r\n                \"quantity\": \"1\",\r\n                \"unitPrice\": \"50\",\r\n                \"unitDiscountAmount\": \"5.00\",\r\n                \"unitTaxAmount\": \"5\",\r\n                \"sku\": \"2\"\r\n            }\r\n        ]\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Partial REFUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"REFUND\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"25.00\",\r\n   \t\t\"currency\": \"{{currency}}\",\r\n        \"item\": [\r\n            {\r\n                \"name\": \"TestItem_01\",\r\n                \"brand\": \"dell\",\r\n                \"category\": \"electronics\",\r\n                \"description\": \"laptop 1TB 64GB\",\r\n                \"quantity\": \"1\",\r\n                \"unitPrice\": \"50\",\r\n                \"unitDiscountAmount\": \"5.00\",\r\n                \"unitTaxAmount\": \"5\",\r\n                \"sku\": \"2\"\r\n            }\r\n        ]\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Merchant Custom Data",
					"item": [
						{
							"name": "1. AUTHORIZE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"AUTHORIZE\",\r\n   \"order\": {\r\n   \t\t\"amount\": \"150.00\",\r\n        \"certainty\": \"ESTIMATED\",\r\n   \t\t\"currency\": \"{{currency}}\",\r\n        \"custom\": {\r\n            \"shoppingList\": \"Orange juice, milk, bread\",\r\n            \"favoriteColor\": \"Green\"\r\n        }\r\n   },\r\n   \"sourceOfFunds\": {\r\n   \t\t\"type\": \"CARD\",\r\n   \t\t\"provided\": {\r\n   \t\t\t\"card\": {\r\n   \t\t\t\t\"number\": \"{{fpan}}\",\r\n   \t\t\t\t\"expiry\": {\r\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\r\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\r\n   \t\t\t\t},\r\n   \t\t\t\t\"securityCode\" : {{securityCode}}\r\n   \t\t\t}\r\n   \t\t}\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. CAPTURE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGVtbw==",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"apiOperation\": \"CAPTURE\",\r\n   \"transaction\": {\r\n   \t\t\"amount\": \"100.00\",\r\n   \t\t\"currency\": \"{{currency}}\"\r\n   }\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Statement Descriptor Data",
					"item": [
						{
							"name": "PAY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,200])\r",
											"});\r",
											"\r",
											"pm.test(\"Result is SUCCESS\", () => {\r",
											"    pm.expect(responseJson.result).to.eql(\"SUCCESS\")\r",
											"});\r",
											" \r",
											"pm.test(\"Gateway Code is APPROVED\", () => {\r",
											"    pm.expect(responseJson.response.gatewayCode).to.contain(\"APPROVED\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"orderId\", _.random(1,999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{apiPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "merchant.{{merchantId}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"apiOperation\": \"PAY\",\n   \"order\": {\n   \t\t\"amount\": \"100.00\",\n   \t\t\"currency\": \"{{currency}}\",\n        \"statementDescriptor\": {\n            \"name\": \"Food Truck 101\",\n            \"address\": {\n                \"street\": \"123 Example Street\",\n                \"city\": \"New York\",\n                \"stateProvince\": \"NY\",\n                \"postcodeZip\": \"10000\",\n                \"country\": \"USA\"\n            }\n        }\n\n   },\n   \"sourceOfFunds\": {\n   \t\t\"type\": \"CARD\",\n   \t\t\"provided\": {\n   \t\t\t\"card\": {\n   \t\t\t\t\"number\": \"{{fpan}}\",\n   \t\t\t\t\"expiry\": {\n   \t\t\t\t\t\"month\": \"{{expMonth}}\",\n   \t\t\t\t\t\"year\": \"{{expYear}}\"\n   \t\t\t\t},\n   \t\t\t\t\"securityCode\" : {{securityCode}}\n   \t\t\t}\n   \t\t}\n   }\n}"
								},
								"url": {
									"raw": "https://{{host}}/api/rest/version/100/merchant/{{merchantId}}/order/{{orderId}}/transaction/1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"rest",
										"version",
										"100",
										"merchant",
										"{{merchantId}}",
										"order",
										"{{orderId}}",
										"transaction",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Contains request examples for the following gateway features:\n\n- Gateway status check\n- Payment options inquiries\n    \n- Aggregating payments from sub-merchants\n- Account funding transactions (AFT) that involve debiting money from one account to credit another account.\n- Various supplementary data fields that enchance your request, such as airline or cruise data, merchant-defined custom data, and statement descriptor data"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}